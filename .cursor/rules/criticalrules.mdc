---
description: # Critical Rules for Cursor.ai  ## üö® Essential Setup Rules  ### 1. **Use Project Rules (.cursor/rules)** - **NEW**: Place rules in `.cursor/rules/` directory (not deprecated `.cursorrules`) - Use `.mdc` format with metadata front-matter - Version control your rules with your codebase - Create specific rules for different file types/contexts  ### 2. **Safe Editing Policy** ```markdown ## Rule: Safe Editing Policy - DO NOT remove or break any existing code - DO NOT modify current logic unless necessary   - Only extend or add new code with minimal, safe changes - Change as few lines as possible while solving the problem ```  ## üéØ Code Quality Fundamentals  ### 3. **Type Safety First** - Always use TypeScript for JavaScript projects - Prefer interfaces over types - Avoid `any` unless explicitly allowed - Enable strict mode in TypeScript - Use type hints in Python, strict typing in PHP  ### 4. **Consistency Rules** ```markdown ## Rule: Code Style - Use consistent naming conventions (camelCase, snake_case, etc.) - Use lowercase with dashes for directories (e.g., `components/auth-wizard`) - Favor named exports for components - Follow existing project patterns and style ```  ### 5. **Functional Programming Patterns** - Prefer functional and declarative programming over OOP - Use iteration and modularization over code duplication - Avoid classes when functions suffice - Keep functions pure when possible  ## üîí Security & Performance  ### 6. **Security First** ```markdown ## Rule: Security - Validate all inputs - Implement robust authentication (OAuth 2.0, JWT) - Always use HTTPS for external requests - Use Content Security Policy (CSP) - Follow least privilege principle ```  ### 7. **Performance Optimization** - Use code-splitting and lazy loading - Optimize images (WebP format) - Prioritize Core Web Vitals (LCP, CLS, FID) - Implement proper caching strategies  ## üìÅ Organization & Structure  ### 8. **File Organization** ```markdown ## Rule: File Structure - Keep controllers/components skinny - Use concerns/hooks for shared logic - Follow RESTful conventions - Organize by feature, not by file type ```  ### 9. **Testing Requirements** - Write tests for all critical paths - Tests must pass before merge - Use system/integration tests for key workflows - Include error handling tests  ## ü§ñ AI Interaction Best Practices  ### 10. **Effective Prompting** - Be explicit about intent and constraints - Reference specific files with `@filename` - Use "Please follow our [specific rule]" for critical tasks - Start fresh dialogs for complex rule-dependent tasks  ### 11. **Context Management** ```markdown ## Rule: Context - Read README.md if no .cursorrules exists - Summarize project before working on it - Reference documentation rather than explaining basics - Use examples in rules to illustrate points ```  ## ‚ö° Advanced Optimization  ### 12. **Error Handling** ```markdown ## Rule: Error Handling - Fail fast, fail clearly - Catch errors early and log properly - Provide meaningful error messages - Implement proper exception handling ```  ### 13. **Documentation Standards** - Comment new logic briefly if not self-explanatory - Keep function and variable names descriptive - Update documentation with code changes - Use JSDoc/docstring for public APIs  ### 14. **Formatting Rules** ```markdown ## Rule: Formatting - DO NOT add or remove empty lines unnecessarily - DO NOT change existing spacing unless required by linting - Avoid cosmetic-only changes unless requested - Respect existing code style and patterns ```  ## üîÑ Rule Management Tips  ### 15. **Rule Optimization** - Keep rules under 500 lines for best performance - Use specific globs to scope rules appropriately - Break complex standards into focused, smaller rules - Iterate and refine based on AI performance  ### 16. **Global vs Project Rules** - **Global Rules**: Fundamental principles, language preferences - **Project Rules**: Domain-specific knowledge, framework patterns - Use `alwaysApply: true` for critical rules - Use descriptions for agent-requested rules  ## üé™ Pro Tips  ### 17. **Specialized Contexts** - Create separate rule files for different domains (API, frontend, testing) - Use subdirectories in `.cursor/rules` for organization   - Reference template files with `@template-file.ts` - Enable rules based on file patterns with `globs`  ### 18. **Team Collaboration** - Version control all project rules - Document rule changes in commit messages - Share rule examples in team documentation - Regular rule review and updates  ---  **Remember**: Rules provide persistent context to AI - they're included at the start of every prompt, so make them count!
alwaysApply: false
---
